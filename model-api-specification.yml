openapi: 3.0.0
info:
  title: External NLU API
  version: 0.0.0

tags:
  - name: Nlu
    description: NLU methods.

paths:
  /process-text:
    post:
      operationId: processText
      tags:
        - Nlu
      description: Text processing method. It performs markup and spelling correction (if it is possible for the given language and set in method body).
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TextPreprocessorRequestData"
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TextPreprocessorResponseData"
        '400':
          description: Request body is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /ner:
    post:
      operationId: ner
      tags:
        - Nlu
      description: Performs named entity recognition.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NerRequestData"
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NerResponseData"
        '400':
          description: Request body is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  "/classifiers/{classifierName}/predictnbest/{modelId}":
    post:
      operationId: predict
      tags:
        - Nlu
      parameters:
        - name: classifierName
          in: path
          description: Classifier unique name.
          required: true
          schema:
            type: string
        - name: modelId
          in: path
          description: ID of trained classifier model.
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PredictRequestData"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PredictResponseData"
        '404':
          description: Classifier with specified name or model ID not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '400':
          description: Request body is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    TextPreprocessorRequestData:
      properties:
        documents:
          type: array
          title: Documents
          description: List of documents to be processed.
          default: [ ]
          example:
            - hello how are you
            - hi i'm fine thanks
          items:
            type: string
        language:
          type: string
          title: Language
          description: Documents language.
          example: en
        engine:
          type: string
          title: Engine
          description: Engine for text processing (tokenizing, pos-tagging and lemmatizing).
          example: udpipe
        markPatterns:
          type: boolean
          title: Mark patterns
          description: Is marking patterns expected. If set to true, all the structures in text that consist of symbol `$` and english text after it are recognized as patterns
          default: false
        fixSpells:
          type: boolean
          title: Fix spells
          description: Is spelling correction should be performed.
          default: false
          example: true
        additionalParams:
          type: object
          description: Map of additional parameters, may be set in project extended settings for action `markup`.
          additionalProperties:
            type: string

      required:
        - documents
        - language
        - engine
        - fix_spells

    TextPreprocessorResponseData:
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/MarkupData'

    MarkupData:
      properties:
        source:
          description: Source text.
          type: string
        correctedText:
          description: Corrected text. If spelling correction is disabled, it should be equal to source text.
          type: string
        words:
          description: List of phrase tokens.
          type: array
          items:
            $ref: '#/components/schemas/WordMarkupData'
      required:
        - source
        - words

    WordMarkupData:
      properties:
        annotations:
          type: object
          properties:
            lemma:
              description: Word's lemma.
              type: string
            pos:
              description: Word's part of speech. The format is up to external NLU service implementation as the JAICP does not require any specific formatting for POS-tagging identifiers.
              type: string
        startPos:
          description: An index of a word first symbol in source text phrase. For example, the startPos of word `how` in phrase `hello, how are you` is 6.
          type: integer
        endPos:
          description: An index of a word last symbol in source text phrase. For example, the endPos of word `how` in phrase `hello, how are you` is 10.
          type: integer
        pattern:
          description: Is this word a pattern or not. Please refer to field `mark_patterns` in TextPreprocessorRequestData.
          type: boolean
        punctuation:
          description: Is this word a punctuation symbol or not. For example, if we tokenize a phrase `hello, how are you` and get a second token, which is `,`, this flag will be set to true for this token.
          type: boolean
        source:
          description: Source word text.
          type: string
        word:
          description: Spelled and lowercased word text.
          type: string
      required:
        - startPos
        - endPos
        - source
        - word
    NerRequestData:
      properties:
        language:
          type: string
          title: Language
          description: Language (ru, en etc.).
          example: en
        texts:
          type: array
          title: Texts
          description: Texts to be processed.
          default: []
          example: tomorrow at 13 a.m.
          items:
            type: string
        additionalParams:
          type: object
          description: Map of additional parameters, may be set in project extended settings for action `ner`.
          additionalProperties:
            type: string

    NerResponseData:
      properties:
        result:
          type: array
          items:
            $ref: '#/components/schemas/NerMarkupItems'
      type: object

    NerMarkupItems:
      type: object
      properties:
        text:
          description: Source phrase text.
          type: string
        entities:
          type: array
          items:
            $ref: '#/components/schemas/NerItemData'

    NerItemData:
      properties:
        startPos:
          type: integer
          description: An index of a word first symbol in source text phrase. For example, the startPos of word `how` in phrase `hello, how are you` is 6.
        endPos:
          type: integer
          description: An index of a word last symbol in source text phrase. For example, the endPos of word `how` in phrase `hello, how are you` is 10.
        entity:
          type: string
          description: Entity name.
        text:
          type: string
          description: Substring of an original string where the entity was found.
        value:
          type: string
          description: Value associated with found entity. For example, if we have an entity that identifies amount of money, for source phrase `i have two dollars` we would recognize this entity in substring `two dollars` and an associated value might be `2`. By default you may just put value of a `text` field.

    PredictRequestData:
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: Text that should be classified.
        additionalParams:
          type: object
          description: Map of additional parameters, may be set in project extended settings for action `classification`.
          additionalProperties:
            type: string

    PredictResponseData:
      properties:
        result:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/PredictedClassData'

    PredictedClassData:
      properties:
        class:
          type: string
          description: Class unique identifier.
        score:
          type: number
          description: Class score.
          format: double

    ErrorResponse:
      properties:
        error:
          description: An error that is assumed as the most important from all the error that occured during the request processing.
          $ref: '#/components/schemas/ApiError'
        errors:
          description: List of error that occured during the request processing. Includes the main error (see `error` property).
          type: array
          items:
            $ref: '#/components/schemas/ApiError'


    ApiError:
      properties:
        code:
          type: String
          description: Error code that uniquely identifies the error.
        message:
          type: object
          description: Map of error messages, where the key is the error language ("en", "ru", etc.) and the value is the message. CAILA chooses message language by project language. If it is absent in the map, it will choose message with `en` locale. If the message with `en` locale is absent too, it will choose any message. If the map is empty, CAILA will use default error message in english.
          additionalProperties:
            type: string
